/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 240, 320);
    box1.setColor(touchgfx::Color::getColorFromRGB(5, 4, 4));
    add(box1);

    g_Amp.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_BACKGROUNDS_DARK_PRECISION_ID));
    g_Amp.setPosition(120, 18, 120, 120);
    g_Amp.setCenter(60, 60);
    g_Amp.setStartEndAngle(-90, 90);
    g_Amp.setRange(0, 100);
    g_Amp.setValue(0);
    g_Amp.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_NEEDLES_ROUGH_ID, 5, 33);
    g_Amp.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    g_Amp.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(g_Amp);

    g_Amp_1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_BACKGROUNDS_DARK_PRECISION_ID));
    g_Amp_1.setPosition(0, 18, 120, 120);
    g_Amp_1.setCenter(60, 60);
    g_Amp_1.setStartEndAngle(-90, 90);
    g_Amp_1.setRange(0, 100);
    g_Amp_1.setValue(0);
    g_Amp_1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_TINY_NEEDLES_ROUGH_ID, 5, 33);
    g_Amp_1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    g_Amp_1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(g_Amp_1);

    textArea1.setPosition(8, 160, 103, 35);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(230, 216, 216));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KM7L));
    add(textArea1);

    textArea2.setPosition(126, 160, 114, 35);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(240, 237, 237));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JOTG));
    add(textArea2);

    line1.setPosition(120, 42, 31, 72);
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    line1.setPainter(line1Painter);
    line1.setStart(0, 0);
    line1.setEnd(0, 100);
    line1.setLineWidth(5.4f);
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
    add(line1);

    flexButton1.setBoxWithBorderPosition(0, 0, 101, 50);
    flexButton1.setBorderSize(0);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(250, 229, 67), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButton1.setText(TypedText(T___SINGLEUSE_T4Z4));
    flexButton1.setTextPosition(0, 10, 101, 50);
    flexButton1.setTextColors(touchgfx::Color::getColorFromRGB(245, 10, 10), touchgfx::Color::getColorFromRGB(10, 10, 10));
    flexButton1.setAction(flexButtonCallback);
    flexButton1.setPosition(76, 255, 101, 50);
    add(flexButton1);
}

Screen1ViewBase::~Screen1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //Interaction1
        //When flexButton1 clicked change screen to Fenetre_fft
        //Go to Fenetre_fft with no screen transition
        application().gotoFenetre_fftScreenNoTransition();
    }
}
